/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.grpceventstore.AppendEventsToMultipleStreamsRequest', null, global);
goog.exportSymbol('proto.grpceventstore.AppendEventsToStreamRequest', null, global);
goog.exportSymbol('proto.grpceventstore.AppendOperationError', null, global);
goog.exportSymbol('proto.grpceventstore.AppendOperationResult', null, global);
goog.exportSymbol('proto.grpceventstore.AvailabilityError', null, global);
goog.exportSymbol('proto.grpceventstore.CatchUpWithStoreRequest', null, global);
goog.exportSymbol('proto.grpceventstore.CatchUpWithStreamRequest', null, global);
goog.exportSymbol('proto.grpceventstore.CatchUpWithStreamTypeRequest', null, global);
goog.exportSymbol('proto.grpceventstore.ConcurrencyError', null, global);
goog.exportSymbol('proto.grpceventstore.ConcurrencyIssue', null, global);
goog.exportSymbol('proto.grpceventstore.Empty', null, global);
goog.exportSymbol('proto.grpceventstore.Event', null, global);
goog.exportSymbol('proto.grpceventstore.GetLastEventResult', null, global);
goog.exportSymbol('proto.grpceventstore.HeartbeatRequest', null, global);
goog.exportSymbol('proto.grpceventstore.InputValidationError', null, global);
goog.exportSymbol('proto.grpceventstore.JsonPathError', null, global);
goog.exportSymbol('proto.grpceventstore.OverlappingInsertionsError', null, global);
goog.exportSymbol('proto.grpceventstore.ReadStoreForwardRequest', null, global);
goog.exportSymbol('proto.grpceventstore.ReadStreamForwardRequest', null, global);
goog.exportSymbol('proto.grpceventstore.ReadStreamTypeForwardRequest', null, global);
goog.exportSymbol('proto.grpceventstore.StoredEvent', null, global);
goog.exportSymbol('proto.grpceventstore.StoredEventsList', null, global);
goog.exportSymbol('proto.grpceventstore.Stream', null, global);
goog.exportSymbol('proto.grpceventstore.StreamInsertion', null, global);
goog.exportSymbol('proto.grpceventstore.StreamType', null, global);
goog.exportSymbol('proto.grpceventstore.SubscribeToStreamRequest', null, global);
goog.exportSymbol('proto.grpceventstore.SubscribeToStreamTypeRequest', null, global);
goog.exportSymbol('proto.grpceventstore.UnwritableStreamsError', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpceventstore.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.Empty.displayName = 'proto.grpceventstore.Empty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.Empty}
 */
proto.grpceventstore.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.Empty;
  return proto.grpceventstore.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.Empty}
 */
proto.grpceventstore.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.HeartbeatRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpceventstore.HeartbeatRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.HeartbeatRequest.displayName = 'proto.grpceventstore.HeartbeatRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.HeartbeatRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.HeartbeatRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.HeartbeatRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.HeartbeatRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    interval: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.HeartbeatRequest}
 */
proto.grpceventstore.HeartbeatRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.HeartbeatRequest;
  return proto.grpceventstore.HeartbeatRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.HeartbeatRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.HeartbeatRequest}
 */
proto.grpceventstore.HeartbeatRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.HeartbeatRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.HeartbeatRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.HeartbeatRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.HeartbeatRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInterval();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 interval = 1;
 * @return {number}
 */
proto.grpceventstore.HeartbeatRequest.prototype.getInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.grpceventstore.HeartbeatRequest.prototype.setInterval = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.StreamType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpceventstore.StreamType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.StreamType.displayName = 'proto.grpceventstore.StreamType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.StreamType.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.StreamType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.StreamType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.StreamType.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.StreamType}
 */
proto.grpceventstore.StreamType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.StreamType;
  return proto.grpceventstore.StreamType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.StreamType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.StreamType}
 */
proto.grpceventstore.StreamType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.StreamType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.StreamType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.StreamType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.StreamType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string context = 1;
 * @return {string}
 */
proto.grpceventstore.StreamType.prototype.getContext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.grpceventstore.StreamType.prototype.setContext = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.grpceventstore.StreamType.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.grpceventstore.StreamType.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.Stream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpceventstore.Stream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.Stream.displayName = 'proto.grpceventstore.Stream';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.Stream.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.Stream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.Stream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.Stream.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: (f = msg.getType()) && proto.grpceventstore.StreamType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.Stream}
 */
proto.grpceventstore.Stream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.Stream;
  return proto.grpceventstore.Stream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.Stream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.Stream}
 */
proto.grpceventstore.Stream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.grpceventstore.StreamType;
      reader.readMessage(value,proto.grpceventstore.StreamType.deserializeBinaryFromReader);
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.Stream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.Stream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.Stream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.Stream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpceventstore.StreamType.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.grpceventstore.Stream.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.grpceventstore.Stream.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional StreamType type = 2;
 * @return {?proto.grpceventstore.StreamType}
 */
proto.grpceventstore.Stream.prototype.getType = function() {
  return /** @type{?proto.grpceventstore.StreamType} */ (
    jspb.Message.getWrapperField(this, proto.grpceventstore.StreamType, 2));
};


/** @param {?proto.grpceventstore.StreamType|undefined} value */
proto.grpceventstore.Stream.prototype.setType = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.grpceventstore.Stream.prototype.clearType = function() {
  this.setType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpceventstore.Stream.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpceventstore.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.Event.displayName = 'proto.grpceventstore.Event';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    payload: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.Event}
 */
proto.grpceventstore.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.Event;
  return proto.grpceventstore.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.Event}
 */
proto.grpceventstore.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPayload();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.grpceventstore.Event.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.grpceventstore.Event.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string payload = 2;
 * @return {string}
 */
proto.grpceventstore.Event.prototype.getPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.grpceventstore.Event.prototype.setPayload = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.StoredEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpceventstore.StoredEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.StoredEvent.displayName = 'proto.grpceventstore.StoredEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.StoredEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.StoredEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.StoredEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.StoredEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    stream: (f = msg.getStream()) && proto.grpceventstore.Stream.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    payload: jspb.Message.getFieldWithDefault(msg, 4, ""),
    storedOn: jspb.Message.getFieldWithDefault(msg, 5, ""),
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 6, 0),
    correlationId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    transactionId: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.StoredEvent}
 */
proto.grpceventstore.StoredEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.StoredEvent;
  return proto.grpceventstore.StoredEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.StoredEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.StoredEvent}
 */
proto.grpceventstore.StoredEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.grpceventstore.Stream;
      reader.readMessage(value,proto.grpceventstore.Stream.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayload(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStoredOn(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceNumber(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.StoredEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.StoredEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.StoredEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.StoredEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpceventstore.Stream.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPayload();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStoredOn();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getCorrelationId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTransactionId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {string}
 */
proto.grpceventstore.StoredEvent.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.grpceventstore.StoredEvent.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Stream stream = 2;
 * @return {?proto.grpceventstore.Stream}
 */
proto.grpceventstore.StoredEvent.prototype.getStream = function() {
  return /** @type{?proto.grpceventstore.Stream} */ (
    jspb.Message.getWrapperField(this, proto.grpceventstore.Stream, 2));
};


/** @param {?proto.grpceventstore.Stream|undefined} value */
proto.grpceventstore.StoredEvent.prototype.setStream = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.grpceventstore.StoredEvent.prototype.clearStream = function() {
  this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpceventstore.StoredEvent.prototype.hasStream = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.grpceventstore.StoredEvent.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.grpceventstore.StoredEvent.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string payload = 4;
 * @return {string}
 */
proto.grpceventstore.StoredEvent.prototype.getPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.grpceventstore.StoredEvent.prototype.setPayload = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string stored_on = 5;
 * @return {string}
 */
proto.grpceventstore.StoredEvent.prototype.getStoredOn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.grpceventstore.StoredEvent.prototype.setStoredOn = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 sequence_number = 6;
 * @return {number}
 */
proto.grpceventstore.StoredEvent.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.grpceventstore.StoredEvent.prototype.setSequenceNumber = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string correlation_id = 7;
 * @return {string}
 */
proto.grpceventstore.StoredEvent.prototype.getCorrelationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.grpceventstore.StoredEvent.prototype.setCorrelationId = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string transaction_id = 8;
 * @return {string}
 */
proto.grpceventstore.StoredEvent.prototype.getTransactionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.grpceventstore.StoredEvent.prototype.setTransactionId = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.GetLastEventResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.grpceventstore.GetLastEventResult.oneofGroups_);
};
goog.inherits(proto.grpceventstore.GetLastEventResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.GetLastEventResult.displayName = 'proto.grpceventstore.GetLastEventResult';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.grpceventstore.GetLastEventResult.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.grpceventstore.GetLastEventResult.ResultCase = {
  RESULT_NOT_SET: 0,
  EVENT: 1,
  AVAILABILITY_ERROR: 2
};

/**
 * @return {proto.grpceventstore.GetLastEventResult.ResultCase}
 */
proto.grpceventstore.GetLastEventResult.prototype.getResultCase = function() {
  return /** @type {proto.grpceventstore.GetLastEventResult.ResultCase} */(jspb.Message.computeOneofCase(this, proto.grpceventstore.GetLastEventResult.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.GetLastEventResult.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.GetLastEventResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.GetLastEventResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.GetLastEventResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && proto.grpceventstore.StoredEvent.toObject(includeInstance, f),
    availabilityError: (f = msg.getAvailabilityError()) && proto.grpceventstore.AvailabilityError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.GetLastEventResult}
 */
proto.grpceventstore.GetLastEventResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.GetLastEventResult;
  return proto.grpceventstore.GetLastEventResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.GetLastEventResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.GetLastEventResult}
 */
proto.grpceventstore.GetLastEventResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpceventstore.StoredEvent;
      reader.readMessage(value,proto.grpceventstore.StoredEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 2:
      var value = new proto.grpceventstore.AvailabilityError;
      reader.readMessage(value,proto.grpceventstore.AvailabilityError.deserializeBinaryFromReader);
      msg.setAvailabilityError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.GetLastEventResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.GetLastEventResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.GetLastEventResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.GetLastEventResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpceventstore.StoredEvent.serializeBinaryToWriter
    );
  }
  f = message.getAvailabilityError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpceventstore.AvailabilityError.serializeBinaryToWriter
    );
  }
};


/**
 * optional StoredEvent event = 1;
 * @return {?proto.grpceventstore.StoredEvent}
 */
proto.grpceventstore.GetLastEventResult.prototype.getEvent = function() {
  return /** @type{?proto.grpceventstore.StoredEvent} */ (
    jspb.Message.getWrapperField(this, proto.grpceventstore.StoredEvent, 1));
};


/** @param {?proto.grpceventstore.StoredEvent|undefined} value */
proto.grpceventstore.GetLastEventResult.prototype.setEvent = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.grpceventstore.GetLastEventResult.oneofGroups_[0], value);
};


proto.grpceventstore.GetLastEventResult.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpceventstore.GetLastEventResult.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AvailabilityError availability_error = 2;
 * @return {?proto.grpceventstore.AvailabilityError}
 */
proto.grpceventstore.GetLastEventResult.prototype.getAvailabilityError = function() {
  return /** @type{?proto.grpceventstore.AvailabilityError} */ (
    jspb.Message.getWrapperField(this, proto.grpceventstore.AvailabilityError, 2));
};


/** @param {?proto.grpceventstore.AvailabilityError|undefined} value */
proto.grpceventstore.GetLastEventResult.prototype.setAvailabilityError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.grpceventstore.GetLastEventResult.oneofGroups_[0], value);
};


proto.grpceventstore.GetLastEventResult.prototype.clearAvailabilityError = function() {
  this.setAvailabilityError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpceventstore.GetLastEventResult.prototype.hasAvailabilityError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.CatchUpWithStoreRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpceventstore.CatchUpWithStoreRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.CatchUpWithStoreRequest.displayName = 'proto.grpceventstore.CatchUpWithStoreRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.CatchUpWithStoreRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.CatchUpWithStoreRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.CatchUpWithStoreRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.CatchUpWithStoreRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromEventId: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.CatchUpWithStoreRequest}
 */
proto.grpceventstore.CatchUpWithStoreRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.CatchUpWithStoreRequest;
  return proto.grpceventstore.CatchUpWithStoreRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.CatchUpWithStoreRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.CatchUpWithStoreRequest}
 */
proto.grpceventstore.CatchUpWithStoreRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setFromEventId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.CatchUpWithStoreRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.CatchUpWithStoreRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.CatchUpWithStoreRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.CatchUpWithStoreRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromEventId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
};


/**
 * optional int64 from_event_id = 1;
 * @return {string}
 */
proto.grpceventstore.CatchUpWithStoreRequest.prototype.getFromEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.grpceventstore.CatchUpWithStoreRequest.prototype.setFromEventId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.ReadStoreForwardRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpceventstore.ReadStoreForwardRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.ReadStoreForwardRequest.displayName = 'proto.grpceventstore.ReadStoreForwardRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.ReadStoreForwardRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.ReadStoreForwardRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.ReadStoreForwardRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.ReadStoreForwardRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromEventId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.ReadStoreForwardRequest}
 */
proto.grpceventstore.ReadStoreForwardRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.ReadStoreForwardRequest;
  return proto.grpceventstore.ReadStoreForwardRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.ReadStoreForwardRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.ReadStoreForwardRequest}
 */
proto.grpceventstore.ReadStoreForwardRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setFromEventId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.ReadStoreForwardRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.ReadStoreForwardRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.ReadStoreForwardRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.ReadStoreForwardRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromEventId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int64 from_event_id = 1;
 * @return {string}
 */
proto.grpceventstore.ReadStoreForwardRequest.prototype.getFromEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.grpceventstore.ReadStoreForwardRequest.prototype.setFromEventId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 limit = 2;
 * @return {number}
 */
proto.grpceventstore.ReadStoreForwardRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.grpceventstore.ReadStoreForwardRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.SubscribeToStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpceventstore.SubscribeToStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.SubscribeToStreamRequest.displayName = 'proto.grpceventstore.SubscribeToStreamRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.SubscribeToStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.SubscribeToStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.SubscribeToStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.SubscribeToStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: (f = msg.getStream()) && proto.grpceventstore.Stream.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.SubscribeToStreamRequest}
 */
proto.grpceventstore.SubscribeToStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.SubscribeToStreamRequest;
  return proto.grpceventstore.SubscribeToStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.SubscribeToStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.SubscribeToStreamRequest}
 */
proto.grpceventstore.SubscribeToStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpceventstore.Stream;
      reader.readMessage(value,proto.grpceventstore.Stream.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.SubscribeToStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.SubscribeToStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.SubscribeToStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.SubscribeToStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpceventstore.Stream.serializeBinaryToWriter
    );
  }
};


/**
 * optional Stream stream = 1;
 * @return {?proto.grpceventstore.Stream}
 */
proto.grpceventstore.SubscribeToStreamRequest.prototype.getStream = function() {
  return /** @type{?proto.grpceventstore.Stream} */ (
    jspb.Message.getWrapperField(this, proto.grpceventstore.Stream, 1));
};


/** @param {?proto.grpceventstore.Stream|undefined} value */
proto.grpceventstore.SubscribeToStreamRequest.prototype.setStream = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpceventstore.SubscribeToStreamRequest.prototype.clearStream = function() {
  this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpceventstore.SubscribeToStreamRequest.prototype.hasStream = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.CatchUpWithStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpceventstore.CatchUpWithStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.CatchUpWithStreamRequest.displayName = 'proto.grpceventstore.CatchUpWithStreamRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.CatchUpWithStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.CatchUpWithStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.CatchUpWithStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.CatchUpWithStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: (f = msg.getStream()) && proto.grpceventstore.Stream.toObject(includeInstance, f),
    fromSequenceNumber: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.CatchUpWithStreamRequest}
 */
proto.grpceventstore.CatchUpWithStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.CatchUpWithStreamRequest;
  return proto.grpceventstore.CatchUpWithStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.CatchUpWithStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.CatchUpWithStreamRequest}
 */
proto.grpceventstore.CatchUpWithStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpceventstore.Stream;
      reader.readMessage(value,proto.grpceventstore.Stream.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFromSequenceNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.CatchUpWithStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.CatchUpWithStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.CatchUpWithStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.CatchUpWithStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpceventstore.Stream.serializeBinaryToWriter
    );
  }
  f = message.getFromSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional Stream stream = 1;
 * @return {?proto.grpceventstore.Stream}
 */
proto.grpceventstore.CatchUpWithStreamRequest.prototype.getStream = function() {
  return /** @type{?proto.grpceventstore.Stream} */ (
    jspb.Message.getWrapperField(this, proto.grpceventstore.Stream, 1));
};


/** @param {?proto.grpceventstore.Stream|undefined} value */
proto.grpceventstore.CatchUpWithStreamRequest.prototype.setStream = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpceventstore.CatchUpWithStreamRequest.prototype.clearStream = function() {
  this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpceventstore.CatchUpWithStreamRequest.prototype.hasStream = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 from_sequence_number = 2;
 * @return {number}
 */
proto.grpceventstore.CatchUpWithStreamRequest.prototype.getFromSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.grpceventstore.CatchUpWithStreamRequest.prototype.setFromSequenceNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.ReadStreamForwardRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpceventstore.ReadStreamForwardRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.ReadStreamForwardRequest.displayName = 'proto.grpceventstore.ReadStreamForwardRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.ReadStreamForwardRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.ReadStreamForwardRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.ReadStreamForwardRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.ReadStreamForwardRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: (f = msg.getStream()) && proto.grpceventstore.Stream.toObject(includeInstance, f),
    fromSequenceNumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.ReadStreamForwardRequest}
 */
proto.grpceventstore.ReadStreamForwardRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.ReadStreamForwardRequest;
  return proto.grpceventstore.ReadStreamForwardRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.ReadStreamForwardRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.ReadStreamForwardRequest}
 */
proto.grpceventstore.ReadStreamForwardRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpceventstore.Stream;
      reader.readMessage(value,proto.grpceventstore.Stream.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFromSequenceNumber(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.ReadStreamForwardRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.ReadStreamForwardRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.ReadStreamForwardRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.ReadStreamForwardRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpceventstore.Stream.serializeBinaryToWriter
    );
  }
  f = message.getFromSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional Stream stream = 1;
 * @return {?proto.grpceventstore.Stream}
 */
proto.grpceventstore.ReadStreamForwardRequest.prototype.getStream = function() {
  return /** @type{?proto.grpceventstore.Stream} */ (
    jspb.Message.getWrapperField(this, proto.grpceventstore.Stream, 1));
};


/** @param {?proto.grpceventstore.Stream|undefined} value */
proto.grpceventstore.ReadStreamForwardRequest.prototype.setStream = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpceventstore.ReadStreamForwardRequest.prototype.clearStream = function() {
  this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpceventstore.ReadStreamForwardRequest.prototype.hasStream = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 from_sequence_number = 2;
 * @return {number}
 */
proto.grpceventstore.ReadStreamForwardRequest.prototype.getFromSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.grpceventstore.ReadStreamForwardRequest.prototype.setFromSequenceNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 limit = 3;
 * @return {number}
 */
proto.grpceventstore.ReadStreamForwardRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.grpceventstore.ReadStreamForwardRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.SubscribeToStreamTypeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpceventstore.SubscribeToStreamTypeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.SubscribeToStreamTypeRequest.displayName = 'proto.grpceventstore.SubscribeToStreamTypeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.SubscribeToStreamTypeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.SubscribeToStreamTypeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.SubscribeToStreamTypeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.SubscribeToStreamTypeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamType: (f = msg.getStreamType()) && proto.grpceventstore.StreamType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.SubscribeToStreamTypeRequest}
 */
proto.grpceventstore.SubscribeToStreamTypeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.SubscribeToStreamTypeRequest;
  return proto.grpceventstore.SubscribeToStreamTypeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.SubscribeToStreamTypeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.SubscribeToStreamTypeRequest}
 */
proto.grpceventstore.SubscribeToStreamTypeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpceventstore.StreamType;
      reader.readMessage(value,proto.grpceventstore.StreamType.deserializeBinaryFromReader);
      msg.setStreamType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.SubscribeToStreamTypeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.SubscribeToStreamTypeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.SubscribeToStreamTypeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.SubscribeToStreamTypeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpceventstore.StreamType.serializeBinaryToWriter
    );
  }
};


/**
 * optional StreamType stream_type = 1;
 * @return {?proto.grpceventstore.StreamType}
 */
proto.grpceventstore.SubscribeToStreamTypeRequest.prototype.getStreamType = function() {
  return /** @type{?proto.grpceventstore.StreamType} */ (
    jspb.Message.getWrapperField(this, proto.grpceventstore.StreamType, 1));
};


/** @param {?proto.grpceventstore.StreamType|undefined} value */
proto.grpceventstore.SubscribeToStreamTypeRequest.prototype.setStreamType = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpceventstore.SubscribeToStreamTypeRequest.prototype.clearStreamType = function() {
  this.setStreamType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpceventstore.SubscribeToStreamTypeRequest.prototype.hasStreamType = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.CatchUpWithStreamTypeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpceventstore.CatchUpWithStreamTypeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.CatchUpWithStreamTypeRequest.displayName = 'proto.grpceventstore.CatchUpWithStreamTypeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.CatchUpWithStreamTypeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.CatchUpWithStreamTypeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.CatchUpWithStreamTypeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.CatchUpWithStreamTypeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamType: (f = msg.getStreamType()) && proto.grpceventstore.StreamType.toObject(includeInstance, f),
    fromEventId: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.CatchUpWithStreamTypeRequest}
 */
proto.grpceventstore.CatchUpWithStreamTypeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.CatchUpWithStreamTypeRequest;
  return proto.grpceventstore.CatchUpWithStreamTypeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.CatchUpWithStreamTypeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.CatchUpWithStreamTypeRequest}
 */
proto.grpceventstore.CatchUpWithStreamTypeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpceventstore.StreamType;
      reader.readMessage(value,proto.grpceventstore.StreamType.deserializeBinaryFromReader);
      msg.setStreamType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setFromEventId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.CatchUpWithStreamTypeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.CatchUpWithStreamTypeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.CatchUpWithStreamTypeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.CatchUpWithStreamTypeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpceventstore.StreamType.serializeBinaryToWriter
    );
  }
  f = message.getFromEventId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
};


/**
 * optional StreamType stream_type = 1;
 * @return {?proto.grpceventstore.StreamType}
 */
proto.grpceventstore.CatchUpWithStreamTypeRequest.prototype.getStreamType = function() {
  return /** @type{?proto.grpceventstore.StreamType} */ (
    jspb.Message.getWrapperField(this, proto.grpceventstore.StreamType, 1));
};


/** @param {?proto.grpceventstore.StreamType|undefined} value */
proto.grpceventstore.CatchUpWithStreamTypeRequest.prototype.setStreamType = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpceventstore.CatchUpWithStreamTypeRequest.prototype.clearStreamType = function() {
  this.setStreamType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpceventstore.CatchUpWithStreamTypeRequest.prototype.hasStreamType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 from_event_id = 2;
 * @return {string}
 */
proto.grpceventstore.CatchUpWithStreamTypeRequest.prototype.getFromEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.grpceventstore.CatchUpWithStreamTypeRequest.prototype.setFromEventId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.ReadStreamTypeForwardRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpceventstore.ReadStreamTypeForwardRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.ReadStreamTypeForwardRequest.displayName = 'proto.grpceventstore.ReadStreamTypeForwardRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.ReadStreamTypeForwardRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.ReadStreamTypeForwardRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.ReadStreamTypeForwardRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.ReadStreamTypeForwardRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamType: (f = msg.getStreamType()) && proto.grpceventstore.StreamType.toObject(includeInstance, f),
    fromEventId: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.ReadStreamTypeForwardRequest}
 */
proto.grpceventstore.ReadStreamTypeForwardRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.ReadStreamTypeForwardRequest;
  return proto.grpceventstore.ReadStreamTypeForwardRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.ReadStreamTypeForwardRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.ReadStreamTypeForwardRequest}
 */
proto.grpceventstore.ReadStreamTypeForwardRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpceventstore.StreamType;
      reader.readMessage(value,proto.grpceventstore.StreamType.deserializeBinaryFromReader);
      msg.setStreamType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setFromEventId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.ReadStreamTypeForwardRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.ReadStreamTypeForwardRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.ReadStreamTypeForwardRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.ReadStreamTypeForwardRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpceventstore.StreamType.serializeBinaryToWriter
    );
  }
  f = message.getFromEventId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional StreamType stream_type = 1;
 * @return {?proto.grpceventstore.StreamType}
 */
proto.grpceventstore.ReadStreamTypeForwardRequest.prototype.getStreamType = function() {
  return /** @type{?proto.grpceventstore.StreamType} */ (
    jspb.Message.getWrapperField(this, proto.grpceventstore.StreamType, 1));
};


/** @param {?proto.grpceventstore.StreamType|undefined} value */
proto.grpceventstore.ReadStreamTypeForwardRequest.prototype.setStreamType = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpceventstore.ReadStreamTypeForwardRequest.prototype.clearStreamType = function() {
  this.setStreamType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpceventstore.ReadStreamTypeForwardRequest.prototype.hasStreamType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 from_event_id = 2;
 * @return {string}
 */
proto.grpceventstore.ReadStreamTypeForwardRequest.prototype.getFromEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.grpceventstore.ReadStreamTypeForwardRequest.prototype.setFromEventId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 limit = 3;
 * @return {number}
 */
proto.grpceventstore.ReadStreamTypeForwardRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.grpceventstore.ReadStreamTypeForwardRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.StreamInsertion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpceventstore.StreamInsertion.repeatedFields_, null);
};
goog.inherits(proto.grpceventstore.StreamInsertion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.StreamInsertion.displayName = 'proto.grpceventstore.StreamInsertion';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpceventstore.StreamInsertion.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.StreamInsertion.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.StreamInsertion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.StreamInsertion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.StreamInsertion.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: (f = msg.getStream()) && proto.grpceventstore.Stream.toObject(includeInstance, f),
    expectedStreamSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.grpceventstore.Event.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.StreamInsertion}
 */
proto.grpceventstore.StreamInsertion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.StreamInsertion;
  return proto.grpceventstore.StreamInsertion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.StreamInsertion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.StreamInsertion}
 */
proto.grpceventstore.StreamInsertion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpceventstore.Stream;
      reader.readMessage(value,proto.grpceventstore.Stream.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpectedStreamSize(value);
      break;
    case 3:
      var value = new proto.grpceventstore.Event;
      reader.readMessage(value,proto.grpceventstore.Event.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.StreamInsertion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.StreamInsertion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.StreamInsertion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.StreamInsertion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpceventstore.Stream.serializeBinaryToWriter
    );
  }
  f = message.getExpectedStreamSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.grpceventstore.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional Stream stream = 1;
 * @return {?proto.grpceventstore.Stream}
 */
proto.grpceventstore.StreamInsertion.prototype.getStream = function() {
  return /** @type{?proto.grpceventstore.Stream} */ (
    jspb.Message.getWrapperField(this, proto.grpceventstore.Stream, 1));
};


/** @param {?proto.grpceventstore.Stream|undefined} value */
proto.grpceventstore.StreamInsertion.prototype.setStream = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpceventstore.StreamInsertion.prototype.clearStream = function() {
  this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpceventstore.StreamInsertion.prototype.hasStream = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 expected_stream_size = 2;
 * @return {number}
 */
proto.grpceventstore.StreamInsertion.prototype.getExpectedStreamSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.grpceventstore.StreamInsertion.prototype.setExpectedStreamSize = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated Event events = 3;
 * @return {!Array.<!proto.grpceventstore.Event>}
 */
proto.grpceventstore.StreamInsertion.prototype.getEventsList = function() {
  return /** @type{!Array.<!proto.grpceventstore.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpceventstore.Event, 3));
};


/** @param {!Array.<!proto.grpceventstore.Event>} value */
proto.grpceventstore.StreamInsertion.prototype.setEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.grpceventstore.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpceventstore.Event}
 */
proto.grpceventstore.StreamInsertion.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.grpceventstore.Event, opt_index);
};


proto.grpceventstore.StreamInsertion.prototype.clearEventsList = function() {
  this.setEventsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.AvailabilityError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpceventstore.AvailabilityError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.AvailabilityError.displayName = 'proto.grpceventstore.AvailabilityError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.AvailabilityError.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.AvailabilityError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.AvailabilityError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.AvailabilityError.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.AvailabilityError}
 */
proto.grpceventstore.AvailabilityError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.AvailabilityError;
  return proto.grpceventstore.AvailabilityError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.AvailabilityError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.AvailabilityError}
 */
proto.grpceventstore.AvailabilityError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.AvailabilityError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.AvailabilityError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.AvailabilityError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.AvailabilityError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.grpceventstore.AvailabilityError.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.grpceventstore.AvailabilityError.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.grpceventstore.AvailabilityError.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.grpceventstore.AvailabilityError.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.JsonPathError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpceventstore.JsonPathError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.JsonPathError.displayName = 'proto.grpceventstore.JsonPathError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.JsonPathError.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.JsonPathError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.JsonPathError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.JsonPathError.toObject = function(includeInstance, msg) {
  var f, obj = {
    jsonpath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.JsonPathError}
 */
proto.grpceventstore.JsonPathError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.JsonPathError;
  return proto.grpceventstore.JsonPathError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.JsonPathError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.JsonPathError}
 */
proto.grpceventstore.JsonPathError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonpath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.JsonPathError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.JsonPathError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.JsonPathError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.JsonPathError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJsonpath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string jsonPath = 1;
 * @return {string}
 */
proto.grpceventstore.JsonPathError.prototype.getJsonpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.grpceventstore.JsonPathError.prototype.setJsonpath = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.grpceventstore.JsonPathError.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.grpceventstore.JsonPathError.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.InputValidationError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpceventstore.InputValidationError.repeatedFields_, null);
};
goog.inherits(proto.grpceventstore.InputValidationError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.InputValidationError.displayName = 'proto.grpceventstore.InputValidationError';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpceventstore.InputValidationError.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.InputValidationError.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.InputValidationError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.InputValidationError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.InputValidationError.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorsList: jspb.Message.toObjectList(msg.getErrorsList(),
    proto.grpceventstore.JsonPathError.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.InputValidationError}
 */
proto.grpceventstore.InputValidationError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.InputValidationError;
  return proto.grpceventstore.InputValidationError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.InputValidationError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.InputValidationError}
 */
proto.grpceventstore.InputValidationError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpceventstore.JsonPathError;
      reader.readMessage(value,proto.grpceventstore.JsonPathError.deserializeBinaryFromReader);
      msg.addErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.InputValidationError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.InputValidationError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.InputValidationError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.InputValidationError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.grpceventstore.JsonPathError.serializeBinaryToWriter
    );
  }
};


/**
 * repeated JsonPathError errors = 1;
 * @return {!Array.<!proto.grpceventstore.JsonPathError>}
 */
proto.grpceventstore.InputValidationError.prototype.getErrorsList = function() {
  return /** @type{!Array.<!proto.grpceventstore.JsonPathError>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpceventstore.JsonPathError, 1));
};


/** @param {!Array.<!proto.grpceventstore.JsonPathError>} value */
proto.grpceventstore.InputValidationError.prototype.setErrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.grpceventstore.JsonPathError=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpceventstore.JsonPathError}
 */
proto.grpceventstore.InputValidationError.prototype.addErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.grpceventstore.JsonPathError, opt_index);
};


proto.grpceventstore.InputValidationError.prototype.clearErrorsList = function() {
  this.setErrorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.OverlappingInsertionsError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpceventstore.OverlappingInsertionsError.repeatedFields_, null);
};
goog.inherits(proto.grpceventstore.OverlappingInsertionsError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.OverlappingInsertionsError.displayName = 'proto.grpceventstore.OverlappingInsertionsError';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpceventstore.OverlappingInsertionsError.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.OverlappingInsertionsError.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.OverlappingInsertionsError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.OverlappingInsertionsError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.OverlappingInsertionsError.toObject = function(includeInstance, msg) {
  var f, obj = {
    indexesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.OverlappingInsertionsError}
 */
proto.grpceventstore.OverlappingInsertionsError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.OverlappingInsertionsError;
  return proto.grpceventstore.OverlappingInsertionsError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.OverlappingInsertionsError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.OverlappingInsertionsError}
 */
proto.grpceventstore.OverlappingInsertionsError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setIndexesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.OverlappingInsertionsError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.OverlappingInsertionsError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.OverlappingInsertionsError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.OverlappingInsertionsError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndexesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 indexes = 1;
 * @return {!Array.<number>}
 */
proto.grpceventstore.OverlappingInsertionsError.prototype.getIndexesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.grpceventstore.OverlappingInsertionsError.prototype.setIndexesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.grpceventstore.OverlappingInsertionsError.prototype.addIndexes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.grpceventstore.OverlappingInsertionsError.prototype.clearIndexesList = function() {
  this.setIndexesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.UnwritableStreamsError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpceventstore.UnwritableStreamsError.repeatedFields_, null);
};
goog.inherits(proto.grpceventstore.UnwritableStreamsError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.UnwritableStreamsError.displayName = 'proto.grpceventstore.UnwritableStreamsError';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpceventstore.UnwritableStreamsError.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.UnwritableStreamsError.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.UnwritableStreamsError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.UnwritableStreamsError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.UnwritableStreamsError.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamsList: jspb.Message.toObjectList(msg.getStreamsList(),
    proto.grpceventstore.Stream.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.UnwritableStreamsError}
 */
proto.grpceventstore.UnwritableStreamsError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.UnwritableStreamsError;
  return proto.grpceventstore.UnwritableStreamsError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.UnwritableStreamsError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.UnwritableStreamsError}
 */
proto.grpceventstore.UnwritableStreamsError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpceventstore.Stream;
      reader.readMessage(value,proto.grpceventstore.Stream.deserializeBinaryFromReader);
      msg.addStreams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.UnwritableStreamsError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.UnwritableStreamsError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.UnwritableStreamsError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.UnwritableStreamsError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.grpceventstore.Stream.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Stream streams = 1;
 * @return {!Array.<!proto.grpceventstore.Stream>}
 */
proto.grpceventstore.UnwritableStreamsError.prototype.getStreamsList = function() {
  return /** @type{!Array.<!proto.grpceventstore.Stream>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpceventstore.Stream, 1));
};


/** @param {!Array.<!proto.grpceventstore.Stream>} value */
proto.grpceventstore.UnwritableStreamsError.prototype.setStreamsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.grpceventstore.Stream=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpceventstore.Stream}
 */
proto.grpceventstore.UnwritableStreamsError.prototype.addStreams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.grpceventstore.Stream, opt_index);
};


proto.grpceventstore.UnwritableStreamsError.prototype.clearStreamsList = function() {
  this.setStreamsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.ConcurrencyIssue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpceventstore.ConcurrencyIssue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.ConcurrencyIssue.displayName = 'proto.grpceventstore.ConcurrencyIssue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.ConcurrencyIssue.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.ConcurrencyIssue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.ConcurrencyIssue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.ConcurrencyIssue.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stream: (f = msg.getStream()) && proto.grpceventstore.Stream.toObject(includeInstance, f),
    expectedStreamSize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    currentStreamSize: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.ConcurrencyIssue}
 */
proto.grpceventstore.ConcurrencyIssue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.ConcurrencyIssue;
  return proto.grpceventstore.ConcurrencyIssue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.ConcurrencyIssue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.ConcurrencyIssue}
 */
proto.grpceventstore.ConcurrencyIssue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.grpceventstore.Stream;
      reader.readMessage(value,proto.grpceventstore.Stream.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpectedStreamSize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentStreamSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.ConcurrencyIssue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.ConcurrencyIssue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.ConcurrencyIssue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.ConcurrencyIssue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpceventstore.Stream.serializeBinaryToWriter
    );
  }
  f = message.getExpectedStreamSize();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCurrentStreamSize();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.grpceventstore.ConcurrencyIssue.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.grpceventstore.ConcurrencyIssue.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Stream stream = 2;
 * @return {?proto.grpceventstore.Stream}
 */
proto.grpceventstore.ConcurrencyIssue.prototype.getStream = function() {
  return /** @type{?proto.grpceventstore.Stream} */ (
    jspb.Message.getWrapperField(this, proto.grpceventstore.Stream, 2));
};


/** @param {?proto.grpceventstore.Stream|undefined} value */
proto.grpceventstore.ConcurrencyIssue.prototype.setStream = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.grpceventstore.ConcurrencyIssue.prototype.clearStream = function() {
  this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpceventstore.ConcurrencyIssue.prototype.hasStream = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 expected_stream_size = 3;
 * @return {number}
 */
proto.grpceventstore.ConcurrencyIssue.prototype.getExpectedStreamSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.grpceventstore.ConcurrencyIssue.prototype.setExpectedStreamSize = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 current_stream_size = 4;
 * @return {number}
 */
proto.grpceventstore.ConcurrencyIssue.prototype.getCurrentStreamSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.grpceventstore.ConcurrencyIssue.prototype.setCurrentStreamSize = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.ConcurrencyError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpceventstore.ConcurrencyError.repeatedFields_, null);
};
goog.inherits(proto.grpceventstore.ConcurrencyError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.ConcurrencyError.displayName = 'proto.grpceventstore.ConcurrencyError';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpceventstore.ConcurrencyError.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.ConcurrencyError.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.ConcurrencyError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.ConcurrencyError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.ConcurrencyError.toObject = function(includeInstance, msg) {
  var f, obj = {
    concurrencyIssuesList: jspb.Message.toObjectList(msg.getConcurrencyIssuesList(),
    proto.grpceventstore.ConcurrencyIssue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.ConcurrencyError}
 */
proto.grpceventstore.ConcurrencyError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.ConcurrencyError;
  return proto.grpceventstore.ConcurrencyError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.ConcurrencyError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.ConcurrencyError}
 */
proto.grpceventstore.ConcurrencyError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpceventstore.ConcurrencyIssue;
      reader.readMessage(value,proto.grpceventstore.ConcurrencyIssue.deserializeBinaryFromReader);
      msg.addConcurrencyIssues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.ConcurrencyError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.ConcurrencyError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.ConcurrencyError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.ConcurrencyError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConcurrencyIssuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.grpceventstore.ConcurrencyIssue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ConcurrencyIssue concurrency_issues = 1;
 * @return {!Array.<!proto.grpceventstore.ConcurrencyIssue>}
 */
proto.grpceventstore.ConcurrencyError.prototype.getConcurrencyIssuesList = function() {
  return /** @type{!Array.<!proto.grpceventstore.ConcurrencyIssue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpceventstore.ConcurrencyIssue, 1));
};


/** @param {!Array.<!proto.grpceventstore.ConcurrencyIssue>} value */
proto.grpceventstore.ConcurrencyError.prototype.setConcurrencyIssuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.grpceventstore.ConcurrencyIssue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpceventstore.ConcurrencyIssue}
 */
proto.grpceventstore.ConcurrencyError.prototype.addConcurrencyIssues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.grpceventstore.ConcurrencyIssue, opt_index);
};


proto.grpceventstore.ConcurrencyError.prototype.clearConcurrencyIssuesList = function() {
  this.setConcurrencyIssuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.AppendOperationError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.grpceventstore.AppendOperationError.oneofGroups_);
};
goog.inherits(proto.grpceventstore.AppendOperationError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.AppendOperationError.displayName = 'proto.grpceventstore.AppendOperationError';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.grpceventstore.AppendOperationError.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.grpceventstore.AppendOperationError.TypeCase = {
  TYPE_NOT_SET: 0,
  AVAILABILITY_ERROR: 1,
  INPUT_VALIDATION_ERROR: 2,
  OVERLAPPING_INSERTIONS_ERROR: 3,
  UNWRITABLE_STREAMS_ERROR: 4,
  CONCURRENCY_ERROR: 5
};

/**
 * @return {proto.grpceventstore.AppendOperationError.TypeCase}
 */
proto.grpceventstore.AppendOperationError.prototype.getTypeCase = function() {
  return /** @type {proto.grpceventstore.AppendOperationError.TypeCase} */(jspb.Message.computeOneofCase(this, proto.grpceventstore.AppendOperationError.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.AppendOperationError.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.AppendOperationError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.AppendOperationError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.AppendOperationError.toObject = function(includeInstance, msg) {
  var f, obj = {
    availabilityError: (f = msg.getAvailabilityError()) && proto.grpceventstore.AvailabilityError.toObject(includeInstance, f),
    inputValidationError: (f = msg.getInputValidationError()) && proto.grpceventstore.InputValidationError.toObject(includeInstance, f),
    overlappingInsertionsError: (f = msg.getOverlappingInsertionsError()) && proto.grpceventstore.OverlappingInsertionsError.toObject(includeInstance, f),
    unwritableStreamsError: (f = msg.getUnwritableStreamsError()) && proto.grpceventstore.UnwritableStreamsError.toObject(includeInstance, f),
    concurrencyError: (f = msg.getConcurrencyError()) && proto.grpceventstore.ConcurrencyError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.AppendOperationError}
 */
proto.grpceventstore.AppendOperationError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.AppendOperationError;
  return proto.grpceventstore.AppendOperationError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.AppendOperationError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.AppendOperationError}
 */
proto.grpceventstore.AppendOperationError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpceventstore.AvailabilityError;
      reader.readMessage(value,proto.grpceventstore.AvailabilityError.deserializeBinaryFromReader);
      msg.setAvailabilityError(value);
      break;
    case 2:
      var value = new proto.grpceventstore.InputValidationError;
      reader.readMessage(value,proto.grpceventstore.InputValidationError.deserializeBinaryFromReader);
      msg.setInputValidationError(value);
      break;
    case 3:
      var value = new proto.grpceventstore.OverlappingInsertionsError;
      reader.readMessage(value,proto.grpceventstore.OverlappingInsertionsError.deserializeBinaryFromReader);
      msg.setOverlappingInsertionsError(value);
      break;
    case 4:
      var value = new proto.grpceventstore.UnwritableStreamsError;
      reader.readMessage(value,proto.grpceventstore.UnwritableStreamsError.deserializeBinaryFromReader);
      msg.setUnwritableStreamsError(value);
      break;
    case 5:
      var value = new proto.grpceventstore.ConcurrencyError;
      reader.readMessage(value,proto.grpceventstore.ConcurrencyError.deserializeBinaryFromReader);
      msg.setConcurrencyError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.AppendOperationError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.AppendOperationError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.AppendOperationError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.AppendOperationError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAvailabilityError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpceventstore.AvailabilityError.serializeBinaryToWriter
    );
  }
  f = message.getInputValidationError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpceventstore.InputValidationError.serializeBinaryToWriter
    );
  }
  f = message.getOverlappingInsertionsError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.grpceventstore.OverlappingInsertionsError.serializeBinaryToWriter
    );
  }
  f = message.getUnwritableStreamsError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.grpceventstore.UnwritableStreamsError.serializeBinaryToWriter
    );
  }
  f = message.getConcurrencyError();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.grpceventstore.ConcurrencyError.serializeBinaryToWriter
    );
  }
};


/**
 * optional AvailabilityError availability_error = 1;
 * @return {?proto.grpceventstore.AvailabilityError}
 */
proto.grpceventstore.AppendOperationError.prototype.getAvailabilityError = function() {
  return /** @type{?proto.grpceventstore.AvailabilityError} */ (
    jspb.Message.getWrapperField(this, proto.grpceventstore.AvailabilityError, 1));
};


/** @param {?proto.grpceventstore.AvailabilityError|undefined} value */
proto.grpceventstore.AppendOperationError.prototype.setAvailabilityError = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.grpceventstore.AppendOperationError.oneofGroups_[0], value);
};


proto.grpceventstore.AppendOperationError.prototype.clearAvailabilityError = function() {
  this.setAvailabilityError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpceventstore.AppendOperationError.prototype.hasAvailabilityError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InputValidationError input_validation_error = 2;
 * @return {?proto.grpceventstore.InputValidationError}
 */
proto.grpceventstore.AppendOperationError.prototype.getInputValidationError = function() {
  return /** @type{?proto.grpceventstore.InputValidationError} */ (
    jspb.Message.getWrapperField(this, proto.grpceventstore.InputValidationError, 2));
};


/** @param {?proto.grpceventstore.InputValidationError|undefined} value */
proto.grpceventstore.AppendOperationError.prototype.setInputValidationError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.grpceventstore.AppendOperationError.oneofGroups_[0], value);
};


proto.grpceventstore.AppendOperationError.prototype.clearInputValidationError = function() {
  this.setInputValidationError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpceventstore.AppendOperationError.prototype.hasInputValidationError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OverlappingInsertionsError overlapping_insertions_error = 3;
 * @return {?proto.grpceventstore.OverlappingInsertionsError}
 */
proto.grpceventstore.AppendOperationError.prototype.getOverlappingInsertionsError = function() {
  return /** @type{?proto.grpceventstore.OverlappingInsertionsError} */ (
    jspb.Message.getWrapperField(this, proto.grpceventstore.OverlappingInsertionsError, 3));
};


/** @param {?proto.grpceventstore.OverlappingInsertionsError|undefined} value */
proto.grpceventstore.AppendOperationError.prototype.setOverlappingInsertionsError = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.grpceventstore.AppendOperationError.oneofGroups_[0], value);
};


proto.grpceventstore.AppendOperationError.prototype.clearOverlappingInsertionsError = function() {
  this.setOverlappingInsertionsError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpceventstore.AppendOperationError.prototype.hasOverlappingInsertionsError = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional UnwritableStreamsError unwritable_streams_error = 4;
 * @return {?proto.grpceventstore.UnwritableStreamsError}
 */
proto.grpceventstore.AppendOperationError.prototype.getUnwritableStreamsError = function() {
  return /** @type{?proto.grpceventstore.UnwritableStreamsError} */ (
    jspb.Message.getWrapperField(this, proto.grpceventstore.UnwritableStreamsError, 4));
};


/** @param {?proto.grpceventstore.UnwritableStreamsError|undefined} value */
proto.grpceventstore.AppendOperationError.prototype.setUnwritableStreamsError = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.grpceventstore.AppendOperationError.oneofGroups_[0], value);
};


proto.grpceventstore.AppendOperationError.prototype.clearUnwritableStreamsError = function() {
  this.setUnwritableStreamsError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpceventstore.AppendOperationError.prototype.hasUnwritableStreamsError = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ConcurrencyError concurrency_error = 5;
 * @return {?proto.grpceventstore.ConcurrencyError}
 */
proto.grpceventstore.AppendOperationError.prototype.getConcurrencyError = function() {
  return /** @type{?proto.grpceventstore.ConcurrencyError} */ (
    jspb.Message.getWrapperField(this, proto.grpceventstore.ConcurrencyError, 5));
};


/** @param {?proto.grpceventstore.ConcurrencyError|undefined} value */
proto.grpceventstore.AppendOperationError.prototype.setConcurrencyError = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.grpceventstore.AppendOperationError.oneofGroups_[0], value);
};


proto.grpceventstore.AppendOperationError.prototype.clearConcurrencyError = function() {
  this.setConcurrencyError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpceventstore.AppendOperationError.prototype.hasConcurrencyError = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.StoredEventsList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpceventstore.StoredEventsList.repeatedFields_, null);
};
goog.inherits(proto.grpceventstore.StoredEventsList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.StoredEventsList.displayName = 'proto.grpceventstore.StoredEventsList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpceventstore.StoredEventsList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.StoredEventsList.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.StoredEventsList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.StoredEventsList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.StoredEventsList.toObject = function(includeInstance, msg) {
  var f, obj = {
    storedEventsList: jspb.Message.toObjectList(msg.getStoredEventsList(),
    proto.grpceventstore.StoredEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.StoredEventsList}
 */
proto.grpceventstore.StoredEventsList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.StoredEventsList;
  return proto.grpceventstore.StoredEventsList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.StoredEventsList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.StoredEventsList}
 */
proto.grpceventstore.StoredEventsList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpceventstore.StoredEvent;
      reader.readMessage(value,proto.grpceventstore.StoredEvent.deserializeBinaryFromReader);
      msg.addStoredEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.StoredEventsList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.StoredEventsList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.StoredEventsList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.StoredEventsList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStoredEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.grpceventstore.StoredEvent.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StoredEvent stored_events = 1;
 * @return {!Array.<!proto.grpceventstore.StoredEvent>}
 */
proto.grpceventstore.StoredEventsList.prototype.getStoredEventsList = function() {
  return /** @type{!Array.<!proto.grpceventstore.StoredEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpceventstore.StoredEvent, 1));
};


/** @param {!Array.<!proto.grpceventstore.StoredEvent>} value */
proto.grpceventstore.StoredEventsList.prototype.setStoredEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.grpceventstore.StoredEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpceventstore.StoredEvent}
 */
proto.grpceventstore.StoredEventsList.prototype.addStoredEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.grpceventstore.StoredEvent, opt_index);
};


proto.grpceventstore.StoredEventsList.prototype.clearStoredEventsList = function() {
  this.setStoredEventsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.AppendEventsToStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpceventstore.AppendEventsToStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.AppendEventsToStreamRequest.displayName = 'proto.grpceventstore.AppendEventsToStreamRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.AppendEventsToStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.AppendEventsToStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.AppendEventsToStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.AppendEventsToStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    correlationId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    insertion: (f = msg.getInsertion()) && proto.grpceventstore.StreamInsertion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.AppendEventsToStreamRequest}
 */
proto.grpceventstore.AppendEventsToStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.AppendEventsToStreamRequest;
  return proto.grpceventstore.AppendEventsToStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.AppendEventsToStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.AppendEventsToStreamRequest}
 */
proto.grpceventstore.AppendEventsToStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationId(value);
      break;
    case 2:
      var value = new proto.grpceventstore.StreamInsertion;
      reader.readMessage(value,proto.grpceventstore.StreamInsertion.deserializeBinaryFromReader);
      msg.setInsertion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.AppendEventsToStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.AppendEventsToStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.AppendEventsToStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.AppendEventsToStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCorrelationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInsertion();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpceventstore.StreamInsertion.serializeBinaryToWriter
    );
  }
};


/**
 * optional string correlation_id = 1;
 * @return {string}
 */
proto.grpceventstore.AppendEventsToStreamRequest.prototype.getCorrelationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.grpceventstore.AppendEventsToStreamRequest.prototype.setCorrelationId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional StreamInsertion insertion = 2;
 * @return {?proto.grpceventstore.StreamInsertion}
 */
proto.grpceventstore.AppendEventsToStreamRequest.prototype.getInsertion = function() {
  return /** @type{?proto.grpceventstore.StreamInsertion} */ (
    jspb.Message.getWrapperField(this, proto.grpceventstore.StreamInsertion, 2));
};


/** @param {?proto.grpceventstore.StreamInsertion|undefined} value */
proto.grpceventstore.AppendEventsToStreamRequest.prototype.setInsertion = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.grpceventstore.AppendEventsToStreamRequest.prototype.clearInsertion = function() {
  this.setInsertion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpceventstore.AppendEventsToStreamRequest.prototype.hasInsertion = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.AppendEventsToMultipleStreamsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpceventstore.AppendEventsToMultipleStreamsRequest.repeatedFields_, null);
};
goog.inherits(proto.grpceventstore.AppendEventsToMultipleStreamsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.AppendEventsToMultipleStreamsRequest.displayName = 'proto.grpceventstore.AppendEventsToMultipleStreamsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpceventstore.AppendEventsToMultipleStreamsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.AppendEventsToMultipleStreamsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.AppendEventsToMultipleStreamsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.AppendEventsToMultipleStreamsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.AppendEventsToMultipleStreamsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    correlationId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    insertionsList: jspb.Message.toObjectList(msg.getInsertionsList(),
    proto.grpceventstore.StreamInsertion.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.AppendEventsToMultipleStreamsRequest}
 */
proto.grpceventstore.AppendEventsToMultipleStreamsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.AppendEventsToMultipleStreamsRequest;
  return proto.grpceventstore.AppendEventsToMultipleStreamsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.AppendEventsToMultipleStreamsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.AppendEventsToMultipleStreamsRequest}
 */
proto.grpceventstore.AppendEventsToMultipleStreamsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationId(value);
      break;
    case 2:
      var value = new proto.grpceventstore.StreamInsertion;
      reader.readMessage(value,proto.grpceventstore.StreamInsertion.deserializeBinaryFromReader);
      msg.addInsertions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.AppendEventsToMultipleStreamsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.AppendEventsToMultipleStreamsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.AppendEventsToMultipleStreamsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.AppendEventsToMultipleStreamsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCorrelationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInsertionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.grpceventstore.StreamInsertion.serializeBinaryToWriter
    );
  }
};


/**
 * optional string correlation_id = 1;
 * @return {string}
 */
proto.grpceventstore.AppendEventsToMultipleStreamsRequest.prototype.getCorrelationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.grpceventstore.AppendEventsToMultipleStreamsRequest.prototype.setCorrelationId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated StreamInsertion insertions = 2;
 * @return {!Array.<!proto.grpceventstore.StreamInsertion>}
 */
proto.grpceventstore.AppendEventsToMultipleStreamsRequest.prototype.getInsertionsList = function() {
  return /** @type{!Array.<!proto.grpceventstore.StreamInsertion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpceventstore.StreamInsertion, 2));
};


/** @param {!Array.<!proto.grpceventstore.StreamInsertion>} value */
proto.grpceventstore.AppendEventsToMultipleStreamsRequest.prototype.setInsertionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.grpceventstore.StreamInsertion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpceventstore.StreamInsertion}
 */
proto.grpceventstore.AppendEventsToMultipleStreamsRequest.prototype.addInsertions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.grpceventstore.StreamInsertion, opt_index);
};


proto.grpceventstore.AppendEventsToMultipleStreamsRequest.prototype.clearInsertionsList = function() {
  this.setInsertionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpceventstore.AppendOperationResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.grpceventstore.AppendOperationResult.oneofGroups_);
};
goog.inherits(proto.grpceventstore.AppendOperationResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpceventstore.AppendOperationResult.displayName = 'proto.grpceventstore.AppendOperationResult';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.grpceventstore.AppendOperationResult.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.grpceventstore.AppendOperationResult.ResultCase = {
  RESULT_NOT_SET: 0,
  SUCCESS: 1,
  ERROR: 2
};

/**
 * @return {proto.grpceventstore.AppendOperationResult.ResultCase}
 */
proto.grpceventstore.AppendOperationResult.prototype.getResultCase = function() {
  return /** @type {proto.grpceventstore.AppendOperationResult.ResultCase} */(jspb.Message.computeOneofCase(this, proto.grpceventstore.AppendOperationResult.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpceventstore.AppendOperationResult.prototype.toObject = function(opt_includeInstance) {
  return proto.grpceventstore.AppendOperationResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpceventstore.AppendOperationResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.AppendOperationResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: (f = msg.getSuccess()) && proto.grpceventstore.StoredEventsList.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.grpceventstore.AppendOperationError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpceventstore.AppendOperationResult}
 */
proto.grpceventstore.AppendOperationResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpceventstore.AppendOperationResult;
  return proto.grpceventstore.AppendOperationResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpceventstore.AppendOperationResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpceventstore.AppendOperationResult}
 */
proto.grpceventstore.AppendOperationResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpceventstore.StoredEventsList;
      reader.readMessage(value,proto.grpceventstore.StoredEventsList.deserializeBinaryFromReader);
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.grpceventstore.AppendOperationError;
      reader.readMessage(value,proto.grpceventstore.AppendOperationError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpceventstore.AppendOperationResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpceventstore.AppendOperationResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpceventstore.AppendOperationResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpceventstore.AppendOperationResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpceventstore.StoredEventsList.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpceventstore.AppendOperationError.serializeBinaryToWriter
    );
  }
};


/**
 * optional StoredEventsList success = 1;
 * @return {?proto.grpceventstore.StoredEventsList}
 */
proto.grpceventstore.AppendOperationResult.prototype.getSuccess = function() {
  return /** @type{?proto.grpceventstore.StoredEventsList} */ (
    jspb.Message.getWrapperField(this, proto.grpceventstore.StoredEventsList, 1));
};


/** @param {?proto.grpceventstore.StoredEventsList|undefined} value */
proto.grpceventstore.AppendOperationResult.prototype.setSuccess = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.grpceventstore.AppendOperationResult.oneofGroups_[0], value);
};


proto.grpceventstore.AppendOperationResult.prototype.clearSuccess = function() {
  this.setSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpceventstore.AppendOperationResult.prototype.hasSuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AppendOperationError error = 2;
 * @return {?proto.grpceventstore.AppendOperationError}
 */
proto.grpceventstore.AppendOperationResult.prototype.getError = function() {
  return /** @type{?proto.grpceventstore.AppendOperationError} */ (
    jspb.Message.getWrapperField(this, proto.grpceventstore.AppendOperationError, 2));
};


/** @param {?proto.grpceventstore.AppendOperationError|undefined} value */
proto.grpceventstore.AppendOperationResult.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.grpceventstore.AppendOperationResult.oneofGroups_[0], value);
};


proto.grpceventstore.AppendOperationResult.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpceventstore.AppendOperationResult.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.grpceventstore);
